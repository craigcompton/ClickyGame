{"version":3,"sources":["components/ClickCard/ClickCard.js","components/Jumbotron/Jumbotron.js","components/Nav/Nav.js","components/Wrapper/Wrapper.js","App.js","serviceWorker.js","index.js"],"names":["ClickCard","props","react_default","a","createElement","className","onClick","handleClick","id","alt","name","src","image","Jumbotron","message","Nav","href","title","currentScore","highScore","Wrapper","children","App","state","characters","clickedCharacters","handleShuffle","i","length","j","Math","floor","random","_ref","handleHighScoreCheck","_this","includes","setState","push","_this2","this","components_Wrapper_Wrapper","components_Nav_Nav","components_Jumbotron_Jumbotron","map","character","components_ClickCard_ClickCard","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bfe2ee16.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./ClickCard.css\";\n\nconst ClickCard = props => (\n    <div className=\"card\" onClick={() => props.handleClick(props.id)}>\n        <div className=\"img-container\">\n            <img alt={props.name} src={props.image} />\n        </div>\n    </div>\n)\n\nexport default ClickCard;","import React from \"react\";\nimport \"./Jumbotron.css\";\n\nconst Jumbotron = props => (\n    <div className=\"jumbotron text-center\">\n        <h1>{props.message}</h1>\n    </div>\n)\n\nexport default Jumbotron;","import React from \"react\";\nimport \"./Nav.css\";\n\nconst Nav = props => (\n    <nav className=\"navbar navbar-expand-lg navbar-light\">\n        <a className=\"navbar-brand\" href=\"/\">{props.title}</a>\n        <div className=\"collapse navbar-collapse\" id=\"navbarNav\">\n            <ul className=\"navbar-nav ml-auto\">\n\n            <li className=\"nav-item\">Current Score: {props.currentScore} | High Score: {props.highScore}</li>\n\n            </ul>\n        </div>\n    </nav>\n)\n\nexport default Nav;","import React from \"react\";\nimport \"./Wrapper.css\"\n\nconst Wrapper = props => <div className=\"wrapper\">{props.children}</div>\n\nexport default Wrapper;","import React, { Component } from 'react';\nimport ClickCard from \"./components/ClickCard\";\nimport Jumbotron from \"./components/Jumbotron\";\nimport Nav from \"./components/Nav\";\nimport Wrapper from \"./components/Wrapper\";\nimport characters from \"./characters.json\";\nimport './App.css';\n\nclass App extends Component {\n  state = {\n    characters,\n    currentScore: 0,\n    highScore: 0,\n    clickedCharacters: [],\n    message: \"Click on a Sith Lord to begin!\"\n  };\n\n  // radomizes the cards\n  handleShuffle = characters => {\n    for (let i = characters.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [characters[i], characters[j]] = [characters[j], characters[i]]\n    }\n    return characters;\n  }\n\n  // updates the highest score\n  handleHighScoreCheck = () => {\n    if (this.state.currentScore >= this.state.highScore) {\n      this.state.highScore = this.state.currentScore\n    } else {\n      this.state.highScore = this.state.highScore\n    }\n    return this.state.highScore\n  }\n\n  // selects the clicked character\n  handleClick = id => {\n    let clickedCharacters = this.state.clickedCharacters;\n\n    // resets the game if a duplicate card is selected\n    if (clickedCharacters.includes(id)) {\n      this.setState({\n        characters,\n        clickedCharacters: [],\n        currentScore: 0,\n        highScore: this.handleHighScoreCheck(),\n        message: \"You clicked the same Sith Lord twice!  Begin again!\"\n      })\n      this.handleShuffle(characters);\n    }\n\n    // when a card is selected correctly\n    else {\n      clickedCharacters.push(id)\n      this.setState({\n        characters,\n        currentScore: clickedCharacters.length,\n        message: \"Click on a different Sith Lord!\"\n      })\n      this.handleShuffle(characters);\n\n      // if all cards are selected correctly\n      if (clickedCharacters.length === 18) {\n        this.setState({\n          characters,\n          currentScore: 0,\n          highScore: 18,\n          clickedCharacters: [],\n          message: \"You Win, search your feelings, you know it to be true!\"\n        })\n      }\n    }\n  }\n\n  render() {\n    return (\n      <Wrapper>\n        <Nav\n          title=\"Sith Lord Memory Game\"\n          currentScore={this.state.currentScore}\n          highScore={this.state.highScore}\n        />\n        <Jumbotron\n          message={this.state.message}\n        />\n        {this.state.characters.map(character => (\n          <ClickCard\n            id={character.id}\n            key={character.id}\n            name={character.name}\n            image={character.image}\n            handleClick={this.handleClick}\n          />\n        ))}\n      </Wrapper>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}